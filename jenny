#!/usr/bin/env groovy

// -------------------------------------------------------------------
// Parse the CLI options.
// -------------------------------------------------------------------
def cli = new CliBuilder(usage: "jenny [options]")
cli.l(longOpt: "lib", args: -2, argName: "lib", "path to the library to load")
cli.p(longOpt: "param", args: -2, argName: "property=value", valueSeparator:'=', "parameter to override")
cli.s(longOpt: "skip", args: -2, argName: "id", "stage/parallel/node blocks to skip by ID")
cli.o(longOpt: "only", args: -2, argName: "id", "stage/parallel/node blocks to run by ID (includes ancestors)")
cli.i(longOpt: "info", "show information on the current jenkinsfile, including ids")
cli.h(longOpt: "help", "show this message")

def options = cli.parse(args)

if (options.h) {
    cli.usage();
    return;
}


// -------------------------------------------------------------------
// Start the execution.
// -------------------------------------------------------------------
print """   _
  (_) ___ _ __  _ __  _   _
  | |/ _ \\ '_ \\| '_ \\| | | |
  | |  __/ | | | | | | |_| |
 _/ |\\___|_| |_|_| |_|\\__, |
|__/                  |___/
console jenkins runner

"""

def binding = new Binding()
binding._global = binding

def shell = new GroovyShell(binding)

// -------------------------------------------------------------------
// Prepare parameters for the support functions
// -------------------------------------------------------------------
binding._execute_only_ids = options.onlys
binding._execute_skip_ids = options.skips

// -------------------------------------------------------------------
// Load the default suport functions
// -------------------------------------------------------------------
// find where jenny is installed
File scriptFile = new File(getClass().protectionDomain.codeSource.location.path)

// load all the support files.
new File(scriptFile.parent, "common").listFiles().each {
  shell.evaluate(it)
}

new File(scriptFile.parent, options.info ? "info" : "support").listFiles().each {
  shell.evaluate(it)
}

// -------------------------------------------------------------------
// Load the external libraries
// -------------------------------------------------------------------
def loadLibrary(shell, binding, path) {
    println "Loading library ${path}"
    def libFolder = new File(path, "vars")

    if (!libFolder.exists()) {
        throw new IllegalArgumentException("${libFolder} does not exists")
    }

    libFolder.listFiles().each { commandFile ->
        def command = shell.parse(commandFile)
        binding[command.class.name] = { config = null ->
            return command.invokeMethod("call", config)
        }
    }
}

def loadInfoLibrary(shell, binding, path) {
    println "Loading library ${path}"
    def libFolder = new File(path, "vars")

    if (!libFolder.exists()) {
        throw new IllegalArgumentException("${libFolder} does not exists")
    }

    libFolder.listFiles().each { commandFile ->
        def commandName = commandFile.getName().substring(0, commandFile.getName().lastIndexOf("."))
        binding[commandName] = { config = null ->
            shell.evaluate("println(_currentIndent('${commandName}'))")
        }
    }
}

if (options.libs) {
    options.libs.each {
        if (options.info) {
            loadInfoLibrary(shell, binding, it)
            return
        }

        loadLibrary(shell, binding, it)
    }
}

// -------------------------------------------------------------------
// Override parameters
// -------------------------------------------------------------------
if (options.params) {
    for (def i = 0; i < options.params.size(); i += 2) {
        binding._definedParameters[options.params[i]] = options.params[i + 1]
    }
}

// this will run the current jenkinsfile
shell.evaluate(new File("Jenkinsfile"))

println("Running on ${options.onlys}")
